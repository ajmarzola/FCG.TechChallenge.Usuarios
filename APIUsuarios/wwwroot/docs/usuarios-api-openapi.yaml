openapi: 3.0.3
info:
  title: Usuarios API (CQRS + JWT) — Documentação
  version: 1.2.0
  description: |
    API de Usuários responsável por cadastro, autenticação (JWT) e gestão de perfis (ALUNO/ADMIN).
    - Autenticação: Bearer JWT.
    - Autorização: Roles (ALUNO/ADMIN).
    - CQRS: Commands/Queries via MediatR.
    - Endpoint opcional: /auth/validate para introspecção de token.
servers:
  - url: /
    description: Mesma origem do Swagger UI
tags:
  - name: Auth
    description: Registro, login, introspecção de token
  - name: Users
    description: CRUD de usuários
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Role:
      type: string
      enum:
        - ALUNO
        - ADMIN
    RegisterUserDto:
      type: object
      required:
        - email
        - senha
        - nome
      properties:
        email:
          type: string
          format: email
        senha:
          type: string
          minLength: 6
        nome:
          type: string
          minLength: 2
          maxLength: 160
        role:
          $ref: '#/components/schemas/Role'
    UpdateUserDto:
      type: object
      required:
        - nome
        - role
      properties:
        nome:
          type: string
          minLength: 2
          maxLength: 160
        role:
          $ref: '#/components/schemas/Role'
    LoginDto:
      type: object
      required:
        - email
        - senha
      properties:
        email:
          type: string
          format: email
        senha:
          type: string
    ChangePasswordDto:
      type: object
      required:
        - senhaAtual
        - novaSenha
      properties:
        senhaAtual:
          type: string
        novaSenha:
          type: string
          minLength: 6
    TokenValidationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    TokenIntrospectionResponse:
      type: object
      properties:
        valid:
          type: boolean
        reason:
          type: string
          nullable: true
        claims:
          type: object
          additionalProperties: true
    UserVm:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        nome:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        createdAtUtc:
          type: string
          format: date-time
        updatedAtUtc:
          type: string
          format: date-time
    PagedUserVm:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserVm'
        total:
          type: integer
          minimum: 0
        page:
          type: integer
          minimum: 1
        pageSize:
          type: integer
          minimum: 1
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Registrar usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDto'
      responses:
        '201':
          description: Usuário criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVm'
        '400':
          description: Erro de validação
        '409':
          description: E-mail já cadastrado
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login e retorno de JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: JWT retornado
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Credenciais inválidas
  /auth/validate:
    post:
      tags:
        - Auth
      summary: Introspecção de token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenValidationRequest'
      responses:
        '200':
          description: Resultado da validação
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenIntrospectionResponse'
        '400':
          description: Token ausente ou inválido
  /users:
    get:
      tags:
        - Users
      summary: Listar usuários (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 20
        - in: query
          name: email
          schema:
            type: string
      responses:
        '200':
          description: Lista paginada de usuários
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedUserVm'
        '401':
          description: Não autenticado
        '403':
          description: Acesso negado (requer ADMIN)
    post:
      tags:
        - Users
      summary: Criar usuário (ADMIN)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDto'
      responses:
        '201':
          description: Usuário criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVm'
        '400':
          description: Erro de validação
        '401':
          description: Não autenticado
        '403':
          description: Acesso negado (requer ADMIN)
        '409':
          description: E-mail já cadastrado
  /users/{id}:
    get:
      tags:
        - Users
      summary: Obter usuário por ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVm'
        '401':
          description: Não autenticado
        '403':
          description: Proibido (requer ADMIN ou o próprio usuário)
        '404':
          description: Não encontrado
    put:
      tags:
        - Users
      summary: Atualizar usuário
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Usuário atualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVm'
        '400':
          description: Erro de validação
        '401':
          description: Não autenticado
        '403':
          description: Proibido (ADMIN ou o próprio com restrições)
        '404':
          description: Não encontrado
    delete:
      tags:
        - Users
      summary: Deletar usuário (ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Usuário removido
        '401':
          description: Não autenticado
        '403':
          description: Acesso negado (requer ADMIN)
        '404':
          description: Não encontrado
  /users/{id}/password:
    put:
      tags:
        - Users
      summary: Trocar senha — ADMIN ou o próprio (regras)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '204':
          description: Senha alterada
        '400':
          description: Erro de validação
        '401':
          description: Não autenticado
        '403':
          description: Proibido
        '404':
          description: Não encontrado
security:
  - bearerAuth: []
